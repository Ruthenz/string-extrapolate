{"version":3,"file":"string-extrapolate.mjs","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["/**\n  *\n  * This method zips two arrays together to make an object in which the keys are the first array values and the values are the second array values\n  *\n  * @param keys - An array of keys\n  * @param values - An array of values\n  * @returns An object which is the result of zipping the two arrays\n  *\n  * @example \n  * zipObject([1,2,3], ['one', 'two', 'three']) => { 1: 'one', 2: 'two', 3: 'three' }\n  *\n  * @remarks \n  * This method implementation using forEach was chosen after speed testing other possibilites (namely Object.fromEntries, reduce and Object.assign)\n  *\n  */\nexport function zipObject<T>(keys: string[], values: T[]): Record<string, T> {\n  if (!Array.isArray(keys) || !Array.isArray(values) || keys.length !== values.length) return;\n\n  const result = {} as Record<string, T>;\n  keys.forEach((key, index) => result[key] = values[index]);\n  return result;\n}\n\nexport function removeFirstAndLastChars(str: string): string {\n  return str?.slice(1, -1);\n}\n","import { removeFirstAndLastChars, zipObject } from \"./utils\";\n\n/**\n  *\n  * /     - delimiter\n  * \\{    - opening literal brace escaped because it is a special character used for quantifiers eg {2,3}\n  * (     - start capturing\n  * [^}]  - character class consisting of\n  *   ^   - not\n  *   }   - a closing brace (no escaping necessary because special characters in a character class are different)\n  * +     - one or more of the character class\n  * )     - end capturing\n  * \\}    - the closing literal brace\n  * /     - delimiter\n  *\n  */\nconst insideCurlyBraces = /\\{([^}]+)\\}/g;\n\n/**\n  *\n  * (   - start capturing\n  * [^  - open negated set\n  * \\n  - matches a new line character (because of negation it matches everything BUT newline)\n  * +   - one or more of preceding token\n  * ]   - close set\n  * )   - end capturing\n  *\n  */\nconst regexForAnyCharButNewline = '([^\\\\n]+)';\n\n/**\n  *\n  * @param template - A string in the format of - \"This is a {something}\" \n  * * where {} is used to mark a placeholder\n  *\n  * @param input - The input from which to extrapolate the values of the placeholders\n  *\n  * @returns Returns an object that keys are the placeholder given in the template (i.e {x}) and values are the value from the string\n  *\n  * @example\n  * extrapolate(\"This is an {something}\", \"This is an example\") => { something: \"example\" }\n  *\n  * * Will return an empty object for all wrong cases\n  *\n  * @remarks\n  * The return of an empty object for all wrong cases was a technical decision made in order to simplify.\n  * because most of the use will be with destructing, the error handling will be in the programmer hands, \n  * and there is less chance for an uncaught destructing error.\n  *\n  */\nexport default function extrapolate(template: string, input: string): Record<string, string> {\n  if (!template || !input) return {};\n\n  const placeholders = template.match(insideCurlyBraces);\n  if (!placeholders) return {};\n\n  const keys = placeholders.map(removeFirstAndLastChars);\n\tconst regexTemplate = template.replaceAll(insideCurlyBraces, regexForAnyCharButNewline);\n\n\tconst matches = input.match(regexTemplate);\n\tif (!matches) return {};\n\n  const values = matches.slice(1);\n\n  return zipObject(keys, values);\n}\n"],"names":[],"mappings":"AAegB,SAAA,SAAA,CAAa,MAAgB,MAAgC,EAAA;AAC3E,EAAA,IAAI,CAAC,KAAA,CAAM,OAAQ,CAAA,IAAI,CAAK,IAAA,CAAC,KAAM,CAAA,OAAA,CAAQ,MAAM,CAAA,IAAK,IAAK,CAAA,MAAA,KAAW,MAAO,CAAA,MAAA;AAAQ,IAAA,OAAA;AAErF,EAAA,MAAM,SAAS,EAAC,CAAA;AAChB,EAAA,IAAA,CAAK,QAAQ,CAAC,GAAA,EAAK,UAAU,MAAO,CAAA,GAAA,CAAA,GAAO,OAAO,KAAM,CAAA,CAAA,CAAA;AACxD,EAAO,OAAA,MAAA,CAAA;AACT,CAAA;AAEO,SAAS,wBAAwB,GAAqB,EAAA;AAC3D,EAAO,OAAA,GAAA,EAAK,KAAM,CAAA,CAAA,EAAG,CAAE,CAAA,CAAA,CAAA;AACzB;;ACTA,MAAM,iBAAoB,GAAA,cAAA,CAAA;AAY1B,MAAM,yBAA4B,GAAA,WAAA,CAAA;AAsBV,SAAA,WAAA,CAAY,UAAkB,KAAuC,EAAA;AAC3F,EAAI,IAAA,CAAC,YAAY,CAAC,KAAA;AAAO,IAAA,OAAO,EAAC,CAAA;AAEjC,EAAM,MAAA,YAAA,GAAe,QAAS,CAAA,KAAA,CAAM,iBAAiB,CAAA,CAAA;AACrD,EAAA,IAAI,CAAC,YAAA;AAAc,IAAA,OAAO,EAAC,CAAA;AAE3B,EAAM,MAAA,IAAA,GAAO,YAAa,CAAA,GAAA,CAAI,uBAAuB,CAAA,CAAA;AACtD,EAAA,MAAM,aAAgB,GAAA,QAAA,CAAS,UAAW,CAAA,iBAAA,EAAmB,yBAAyB,CAAA,CAAA;AAEtF,EAAM,MAAA,OAAA,GAAU,KAAM,CAAA,KAAA,CAAM,aAAa,CAAA,CAAA;AACzC,EAAA,IAAI,CAAC,OAAA;AAAS,IAAA,OAAO,EAAC,CAAA;AAErB,EAAM,MAAA,MAAA,GAAS,OAAQ,CAAA,KAAA,CAAM,CAAC,CAAA,CAAA;AAE9B,EAAO,OAAA,SAAA,CAAU,MAAM,MAAM,CAAA,CAAA;AAC/B;;;;"}